import view.ConsoleUI;
import view.View;

/**
 * Класс для запуска консольного приложения
 */
public class MonitoringServiceApp {
    public static void main(String[] args) {

        View consoleUI = new ConsoleUI();
        consoleUI.run();
    }
}


/*
Принято, с замечаниями. Еще несколько замечаний на гитхаб

1. Да, создаешь от main ветку, все изменения по заданию в этой ветку. Потом создаешь реквест и на ревью.
Так же будет на рабочем проекте. Почитай про gitFlow

2. Тесты обязательно написать. Каждый слой (класс) должен тестировать изолировано, т.е. все зависимости мокают.
Доджны быть обязательно и позитивные и негативные тесты (например, тест успешной и неуспешной регистрации пользователя)

3. Расширение, значит возможность добавить новый тип счетчика. Т.е. помимо горячей/холодной воды добавить новый по учету
газа/электричества/солнечной энергии...

4. Аудит - это хранение информации о действиях. Если завтра возникнет задача выяснить, что делал пользователь в определенный
день, или какие пользователи подали показания вчера,... Аудит должен дать возможность эту информацию собрать.

5. Ведь по заданию у администратора есть функционал, который недоступен обычному пользователю. Значит пред выполнением
этого функционала нужна проверка прав доступа (админ ли текущий пользователь)

Почитай еще про Onion архитектуру. Твое приложение должно делиться на четкие слои (пакеты): сущности (объекты предметной
области, чем мы оперируем); репозитории (инкапсулируют в себе хранение данных); сервисы (содержат бизнес-логику). По имени репозитория/сервиса должно быть понятно с какой сущностью/бизнес процессом
происходит работа в этом классе.
 */